{"version":3,"file":"jsforce-api-bulk.min.js","sources":["jsforce-api-bulk.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Bulk","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"process","inherits","stream","Stream","events","_","RecordStream","Promise","HttpApi","Job","bulk","type","operation","options","jobId","_bulk","id","state","_batches","EventEmitter","prototype","info","callback","_jobInfo","check","thenCall","open","_logger","toLowerCase","body","extIdField","join","_request","method","path","headers","Content-Type","responseType","then","res","emit","jobInfo","err","createBatch","batch","Batch","on","batchId","logger","_waitAssign","debug","object","list","batchInfoList","batchInfo","isArray","close","_changeState","abort","job","super_","apply","sendable","_csvStream","CSVStream","nullValue","pipe","_deferred","defer","run","exec","execute","input","_result","rdeferred","promise","resolve","reject","once","data","forEach","record","send","end","isString","write","onResolved","onReject","onProgress","isFunction","nextTick","clone","Id","attributes","poll","interval","timeout","startTime","Date","getTime","now","name","parseInt","numberRecordsProcessed","retrieve","stateMessage","setTimeout","results","_conn","result","map","ret","success","Success","errors","resultId","_stream","BatchStream","writable","_getRequestStream","_reqStream","BulkApi","arguments","beforeSend","request","accessToken","isSessionExpired","response","statusCode","test","hasErrorInResponseBody","error","parseError","errorCode","exceptionCode","message","exceptionMessage","conn","pollInterval","pollTimeout","baseUrl","instanceUrl","version","url","load","createJob","cleanup","cleanupOnError","query","soql","m","replace","match","rstream","_process",2,"drainQueue","draining","currentQueue","len","queue","noop","fun","push","title","browser","env","argv","addListener","off","removeListener","removeAllListeners","binding","cwd","chdir","umask"],"mappings":"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","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Bulk = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process){\n/*global process*/\n/**\n * @file Manages Salesforce Bulk API related operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\nvar inherits     = jsforce.require('inherits'),\n    stream       = jsforce.require('stream'),\n    Stream       = stream.Stream,\n    events       = jsforce.require('events'),\n    _            = jsforce.require('underscore'),\n    RecordStream = jsforce.require('./record-stream'),\n    CSV          = jsforce.require('./csv'),\n    Promise      = jsforce.require('./promise'),\n    HttpApi      = jsforce.require('./http-api');\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API Job\n *\n * @protected\n * @class Bulk~Job\n * @extends events.EventEmitter\n * \n * @param {Bulk} bulk - Bulk API object\n * @param {String} [type] - SObject type\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [jobId] - Job ID (if already available)\n */\nvar Job = function(bulk, type, operation, options, jobId) {\n  this._bulk = bulk;\n  this.type = type;\n  this.operation = operation;\n  this.options = options || {};\n  this.id = jobId;\n  this.state = this.id ? 'Open' : 'Unknown';\n  this._batches = {};\n};\n\ninherits(Job, events.EventEmitter);\n\n/**\n * @typedef {Object} Bulk~JobInfo\n * @prop {String} id - Job ID\n * @prop {String} object - Object type name\n * @prop {String} operation - Operation type of the job\n * @prop {String} state - Job status\n */\n\n/**\n * Return latest jobInfo from cache\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.info = function(callback) {\n  var self = this;\n  // if cache is not available, check the latest\n  if (!this._jobInfo) {\n    this._jobInfo = this.check();\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Open new job and get jobinfo\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.open = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  // if not requested opening job\n  if (!this._jobInfo) {\n    var operation = this.operation.toLowerCase();\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<operation>' + operation + '</operation>',\n        '<object>' + this.type + '</object>',\n        (this.options.extIdField ?\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\n         ''),\n        '<contentType>CSV</contentType>',\n      '</jobInfo>'\n    ].join('');\n\n    this._jobInfo = bulk._request({\n      method : 'POST',\n      path : \"/job\",\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    }).then(function(res) {\n      self.emit(\"open\", res.jobInfo);\n      self.id = res.jobInfo.id;\n      self.state = res.jobInfo.state;\n      return res.jobInfo;\n    }, function(err) {\n      self.emit(\"error\", err);\n      throw err;\n    });\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Create a new batch instance in the job\n *\n * @method Bulk~Job#createBatch\n * @returns {Bulk~Batch}\n */\nJob.prototype.createBatch = function() {\n  var batch = new Batch(this);\n  var self = this;\n  batch.on('queue', function() {\n    self._batches[batch.id] = batch;\n  });\n  return batch;\n};\n\n/**\n * Get a batch instance specified by given batch ID\n *\n * @method Bulk~Job#batch\n * @param {String} batchId - Batch ID\n * @returns {Bulk~Batch}\n */\nJob.prototype.batch = function(batchId) {\n  var batch = this._batches[batchId];\n  if (!batch) {\n    batch = new Batch(this, batchId);\n    this._batches[batchId] = batch;\n  }\n  return batch;\n};\n\n/**\n * Check the latest job status from server\n *\n * @method Bulk~Job#check\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id,\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.id = res.jobInfo.id;\n    self.type = res.jobInfo.object;\n    self.operation = res.jobInfo.operation;\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Wait till the job is assigned to server\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype._waitAssign = function(callback) {\n  return (this.id ? new Promise({ id: this.id }) : this.open()).thenCall(callback);\n};\n\n\n/**\n * List all registered batch info in job\n *\n * @method Bulk~Job#list\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\n */\nJob.prototype.list = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  return this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id + \"/batch\",\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.batchInfoList.batchInfo);\n    var batchInfoList = res.batchInfoList;\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\n    return batchInfoList;\n  }).thenCall(callback);\n\n};\n\n/**\n * Close opened job\n *\n * @method Bulk~Job#close\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.close = function() {\n  var self = this;\n  return this._changeState(\"Closed\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"close\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * Set the status to abort\n *\n * @method Bulk~Job#abort\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.abort = function() {\n  var self = this;\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"abort\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * @private\n */\nJob.prototype._changeState = function(state, callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<state>' + state + '</state>',\n      '</jobInfo>'\n    ].join('');\n    return bulk._request({\n      method : 'POST',\n      path : \"/job/\" + self.id,\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * Batch (extends RecordStream implements Sendable)\n *\n * @protected\n * @class Bulk~Batch\n * @extends {RecordStream}\n * @implements {Promise.<Array.<RecordResult>>}\n * @param {Bulk~Job} job - Bulk job object\n * @param {String} [batchId] - Batch ID (if already available)\n */\nvar Batch = function(job, batchId) {\n  Batch.super_.apply(this);\n  this.sendable = true;\n  this.job = job;\n  this.id = batchId;\n  this._bulk = job._bulk;\n  this._csvStream = new RecordStream.CSVStream({ nullValue: '#N/A' });\n  this._csvStream.stream().pipe(this.stream());\n  this._deferred = Promise.defer();\n};\n\ninherits(Batch, RecordStream);\n\n/**\n * Execute batch operation\n *\n * @method Bulk~Batch#execute\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBatch.prototype.run =\nBatch.prototype.exec =\nBatch.prototype.execute = function(input, callback) {\n  var self = this;\n\n  if (typeof input === 'function') { // if input argument is omitted\n    callback = input;\n    input = null;\n  }\n\n  // if batch is already executed\n  if (this._result) {\n    throw new Error(\"Batch already executed.\");\n  }\n\n  var rdeferred = Promise.defer();\n  this._result = rdeferred.promise;\n  this._result.then(function(res) {\n    self._deferred.resolve(res);\n  }, function(err) {\n    self._deferred.reject(err);\n  });\n  this.once('response', function(res) {\n    rdeferred.resolve(res);\n  });\n  this.once('error', function(err) {\n    rdeferred.reject(err);\n  });\n\n  if (input instanceof Stream) {\n    input.pipe(this.stream());\n  } else {\n    var data;\n    if (_.isArray(input)) {\n      _.forEach(input, function(record) { self.send(record); });\n      self.end();\n    } else if (_.isString(input)){\n      data = input;\n      var stream = this.stream();\n      stream.write(data);\n      stream.end();\n    }\n  }\n\n  // return Batch instance for chaining\n  return this.thenCall(callback);\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Bulk~Batch#then\n */\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Bulk~Batch#thenCall\n */\nBatch.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * @override\n */\nBatch.prototype.send = function(record) {\n  record = _.clone(record);\n  if (this.job.operation === \"insert\") {\n    delete record.Id;\n  } else if (this.job.operation === \"delete\") {\n    record = { Id: record.Id };\n  }\n  delete record.type;\n  delete record.attributes;\n  return this._csvStream.send(record);\n};\n\n/**\n * @override\n */\nBatch.prototype.end = function(record) {\n  if (record) {\n    this.send(record);\n  }\n  this.sendable = false;\n  this._csvStream.end();\n};\n\n/**\n * @typedef {Object} Bulk~BatchInfo\n * @prop {String} id - Batch ID\n * @prop {String} jobId - Job ID\n * @prop {String} state - Batch state\n * @prop {String} stateMessage - Batch state message\n */\n\n/**\n * Check the latest batch status in server\n *\n * @method Bulk~Batch#check\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~BatchInfo>}\n */\nBatch.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  return bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\n    responseType: \"application/xml\"\n  }).then(function(res) {\n    logger.debug(res.batchInfo);\n    return res.batchInfo;\n  }).thenCall(callback);\n};\n\n\n/**\n * Polling the batch result and retrieve\n *\n * @method Bulk~Batch#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nBatch.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\n      err.name = 'PollingTimeout';\n      self.emit('error', err);\n      return;\n    }\n    self.check(function(err, res) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        if (res.state === \"Failed\") {\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\n            self.retrieve();\n          } else {\n            self.emit('error', new Error(res.stateMessage));\n          }\n        } else if (res.state === \"Completed\") {\n          self.retrieve();\n        } else {\n          self.emit('progress', res);\n          setTimeout(poll, interval);\n        }\n      }\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * @typedef {Object} Bulk~BatchResultInfo\n * @prop {String} id - Batch result ID\n * @prop {String} batchId - Batch ID which includes this batch result.\n * @prop {String} jobId - Job ID which includes this batch result.\n */\n\n/**\n * Retrieve batch result\n *\n * @method Bulk~Batch#retrieve\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\n */\nBatch.prototype.retrieve = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var jobId = this.job.id;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return job.info().then(function(jobInfo) {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\n    });\n  }).then(function(res) {\n    var results;\n    if (job.operation === 'query') {\n      var conn = bulk._conn;\n      var resultIds = res['result-list'].result;\n      results = res['result-list'].result;\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\n        return {\n          id: id,\n          batchId: batchId,\n          jobId: jobId\n        };\n      });\n    } else {\n      results = _.map(res, function(ret) {\n        return {\n          id: ret.Id || null,\n          success: ret.Success === \"true\",\n          errors: ret.Error ? [ ret.Error ] : []\n        };\n      });\n    }\n    self.emit('response', results);\n    return results;\n  }, function(err) {\n    self.emit('error', err);\n    throw err;\n  }).thenCall(callback);\n};\n\n/**\n * Fetch query result as a record stream\n * @param {String} resultId - Result id\n * @returns {RecordStream.CSVStream} - Record stream, convertible to CSV data stream\n */\nBatch.prototype.result = function(resultId) {\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  return new RecordStream.CSVStream(null,\n    this._bulk._request({\n      method : 'GET',\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId\n    }).stream()\n  );\n};\n\n/**\n * @override\n */\nBatch.prototype.stream = function() {\n  if (!this._stream) {\n    this._stream = new BatchStream(this);\n  }\n  return this._stream;\n};\n\n/*--------------------------------------------*/\n\n/**\n * Batch uploading stream (extends WritableStream)\n *\n * @private\n * @class Bulk~BatchStream\n * @extends stream.Stream\n */\nvar BatchStream = function(batch) {\n  BatchStream.super_.call(this);\n  this.batch = batch;\n  this.writable = true;\n};\n\ninherits(BatchStream, Stream);\n\n/**\n * @private\n */\nBatchStream.prototype._getRequestStream = function() {\n  var batch = this.batch;\n  var bulk = batch._bulk;\n  var logger = bulk._logger;\n\n  if (!this._reqStream) {\n    this._reqStream = bulk._request({\n      method : 'POST',\n      path : \"/job/\" + batch.job.id + \"/batch\",\n      headers: {\n        \"Content-Type\": \"text/csv\"\n      },\n      responseType: \"application/xml\"\n    }, function(err, res) {\n      if (err) {\n        batch.emit('error', err);\n      } else {\n        logger.debug(res.batchInfo);\n        batch.id = res.batchInfo.id;\n        batch.emit('queue', res.batchInfo);\n      }\n    }).stream();\n  }\n  return this._reqStream;\n};\n\n/**\n * @override\n */\nBatchStream.prototype.write = function(data) {\n  var self = this;\n  this.batch.job.open().then(function() {\n    self._getRequestStream().write(data);\n  }, function(err) {\n    self.emit('error', err);\n  });\n};\n\n/**\n * @override\n */\nBatchStream.prototype.end = function(data) {\n  var self = this;\n  this.writable = false;\n  this.batch.job.open().then(function() {\n    self._getRequestStream().end(data);\n  }, function(err) {\n    self.emit('error', err);\n  });\n};\n\n/*--------------------------------------------*/\n/**\n * @private\n */\nvar BulkApi = function() {\n  BulkApi.super_.apply(this, arguments);\n};\n\ninherits(BulkApi, HttpApi);\n\nBulkApi.prototype.beforeSend = function(request) {\n  request.headers = request.headers || {};\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\n};\n\nBulkApi.prototype.isSessionExpired = function(response) {\n  return response.statusCode === 400 &&\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\n};\n\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\n  return !!body.error;\n};\n\nBulkApi.prototype.parseError = function(body) {\n  return {\n    errorCode: body.error.exceptionCode,\n    message: body.error.exceptionMessage\n  };\n};\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Bulk = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n};\n\n/** \n * Polling interval in milliseconds \n * @type {Number}\n */\nBulk.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollTimeout = 10000;\n\n/** @private **/\nBulk.prototype._request = function(request, callback) {\n  var conn = this._conn;\n  request = _.clone(request);\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\n  request.url = baseUrl + request.path;\n  var options = { responseType: request.responseType };\n  delete request.path;\n  delete request.responseType;\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\n};\n\n/**\n * Create and start bulkload job and batch\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBulk.prototype.load = function(type, operation, options, input, callback) {\n  var self = this;\n  if (!type || !operation) {\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\n  }\n  if (operation.toLowerCase() !== 'upsert') { // options is only for upsert operation\n    callback = input;\n    input = options;\n    options = null;\n  }\n  var job = this.createJob(type, operation, options);\n  job.once('error', function (error) {\n    if (batch) {\n      batch.emit('error', error); // pass job error to batch\n    }\n  });\n  var batch = job.createBatch();\n  var cleanup = function() {\n    batch = null;\n    job.close();\n  };\n  var cleanupOnError = function(err) {\n    if (err.name !== 'PollingTimeout') {\n      cleanup();\n    }\n  };\n  batch.on('response', cleanup);\n  batch.on('error', cleanupOnError);\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\n  return batch.execute(input, callback);\n};\n\n/**\n * Execute bulk query and get record stream\n *\n * @param {String} soql - SOQL to execute in bulk job\n * @returns {RecordStream.CSVStream} - Record stream, convertible to CSV data stream\n */\nBulk.prototype.query = function(soql) {\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\n  if (!m) {\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\n  }\n  var type = m[1];\n  var self = this;\n  var rstream = new RecordStream.CSVStream();\n  this.load(type, \"query\", soql).then(function(results) {\n    // Ideally, it should merge result files into one stream.\n    // Currently only first batch result is the target (mostly enough).\n    var r = results[0];\n    var result = self.job(r.jobId).batch(r.batchId).result(r.id);\n    result.stream().pipe(rstream.stream());\n  });\n  return rstream;\n};\n\n\n/**\n * Create a new job instance\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\n * @param {Object} [options] - Options for bulk loading operation\n * @returns {Bulk~Job}\n */\nBulk.prototype.createJob = function(type, operation, options) {\n  return new Job(this, type, operation, options);\n};\n\n/**\n * Get a job instance specified by given job ID\n *\n * @param {String} jobId - Job ID\n * @returns {Bulk~Job}\n */\nBulk.prototype.job = function(jobId) {\n  return new Job(this, null, null, null, jobId);\n};\n\n\n/*--------------------------------------------*/\n\nmodule.exports = Bulk;\n\n}).call(this,require('_process'))\n},{\"_process\":2}],2:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}]},{},[1])(1)\n});"]}